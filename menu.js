module.exports.config = {
  name: 'menu',
  version: '2.1.0',
  hasPermssion: 0,
  credits: 'DC-Nam mod by Vtuan + Ki√™n (t·ªëi ∆∞u b·ªüi ChatGPT)',
  description: 'Xem to√†n b·ªô danh s√°ch l·ªánh bot ƒë·∫πp',
  commandCategory: 'Danh s√°ch l·ªánh',
  usages: '[all|per <quy·ªÅn>|t√™n l·ªánh]',
  cooldowns: 5,
  envConfig: {
    autoUnsend: { status: true, timeOut: 60 },
    sendAttachments: {
      status: true,
      random: true,
      url: [
        'https://files.catbox.moe/qof2fm.png'
      ]
    }
  }
};

const { findBestMatch } = require('string-similarity');

const { autoUnsend, sendAttachments } =
  global.config?.menu ?? module.exports.config.envConfig;

// ---- H√†m l·∫•y ·∫£nh t·ª´ config ----
async function getAttachment() {
  if (!sendAttachments?.status || !Array.isArray(sendAttachments.url) || !sendAttachments.url.length) {
    return null;
  }
  try {
    const urls = sendAttachments.url;
    const url = sendAttachments.random
      ? urls[Math.floor(Math.random() * urls.length)]
      : urls[0];
    return await global.utils.getStreamFromURL(url);
  } catch {
    return null;
  }
}

// ---- H√†m g·ª≠i tin nh·∫Øn k√®m auto unsend + ·∫£nh ----
async function sendMenuMessage(api, content, tid, mid, sid, dataForReply) {
  const { sendMessage: send, unsendMessage: un } = api;

  let payload = { body: content };
  const attach = await getAttachment();
  if (attach) payload.attachment = attach;

  send(payload, tid, (err, info) => {
    if (err) return console.log(err);

    if (Array.isArray(global.client.handleReply)) {
      global.client.handleReply.push({
        name: module.exports.config.name,
        messageID: info.messageID,
        author: sid,
        case: 'infoGr',
        data: dataForReply
      });
    }

    if (autoUnsend?.status) {
      setTimeout(() => {
        try { un(info.messageID); } catch { }
      }, 1000 * (autoUnsend.timeOut || 60));
    }
  }, mid);
}

// --- H√†m l·∫•y prefix thread ---
function prefix(threadID) {
  const tidData = global.data.threadData.get(threadID) || {};
  return tidData.PREFIX || global.config.PREFIX;
}

// --- Hi·ªÉn th·ªã info l·ªánh ---
function infoCmds(a, threadID) {
  const pre = prefix(threadID);
  return `„Äé ${a.name} „Äè\n
‚ûú Phi√™n b·∫£n : ${a.version}
‚ûú Quy·ªÅn h·∫°n : ${premssionTxt(a.hasPermssion)}
‚ûú T√°c gi·∫£ : ${a.credits}
‚ûú M√¥ t·∫£ : ${a.description}
‚ûú Thu·ªôc nh√≥m : ${a.commandCategory}
‚ûú C√°ch d√πng : ${pre}${a.usages}
‚ûú Th·ªùi gian ch·ªù : ${a.cooldowns} gi√¢y`;
}

function premssionTxt(a) {
  return a === 0 ? 'Th√†nh Vi√™n'
    : a === 1 ? 'Qu·∫£n Tr·ªã Vi√™n Nh√≥m'
      : a === 2 ? 'Ng∆∞·ªùi ƒêi·ªÅu H√†nh Bot'
        : 'ADMINBOT';
}

// --- L·ªçc commands ---
function filterCommands(commands, isAdmin) {
  return Array.from(commands).filter(cmd => {
    const { commandCategory, hasPermssion } = cmd.config;
    if (isAdmin) return true;
    return commandCategory !== 'H·ªá Th·ªëng' && hasPermssion < 2;
  });
}

// --- L·ªçc theo quy·ªÅn ---
function filterCommandsByPermission(commands, permissionLevel) {
  return Array.from(commands).filter(cmd => cmd.config.hasPermssion === permissionLevel);
}

// --- Nh√≥m commands ---
function commandsGroup(isAdmin) {
  const array = [], cmds = filterCommands(global.client.commands.values(), isAdmin);
  for (const cmd of cmds) {
    const { name, commandCategory } = cmd.config;
    const find = array.find(i => i.commandCategory == commandCategory);
    !find
      ? array.push({ commandCategory, commandsName: [name] })
      : find.commandsName.push(name);
  }
  array.sort((a, b) => b.commandsName.length - a.commandsName.length);
  return array;
}

module.exports.run = async function ({ api, event, args }) {
  const { threadID: tid, messageID: mid, senderID: sid } = event;
  const cmds = global.client.commands;
  const isAdmin = global.config?.ADMINBOT?.includes(sid);

  if (args.length >= 1) {
    if (args[0] === 'per' && !isNaN(args[1])) {
      const permissionLevel = parseInt(args[1]);
      const filteredCmds = filterCommandsByPermission(cmds.values(), permissionLevel);
      let txt = `‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶
„Äå L·ªÜNH THEO QUY·ªÄN ${permissionLevel} „Äç
‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶\n\n`;
      filteredCmds.forEach((cmd, i) => txt += `${i + 1}. ${cmd.config.name} | ${cmd.config.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`);
      return sendMenuMessage(api, txt, tid, mid, sid, null);
    }
    if (args[0] === 'all') {
      const data = filterCommands(cmds.values(), isAdmin);
      let txt = `‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶
„Äå MENU TO√ÄN B·ªò L·ªÜNH „Äç
‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶\n\n`;
      data.forEach((cmd, i) => txt += `${i + 1}. ${cmd.config.name} | ${cmd.config.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}\n`);
      txt += `\nT·ªïng: ${data.length} l·ªánh
‚è∞ ${new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" })}
„Äé ü§ñ Bot by Ki√™n „Äè`;
      return sendMenuMessage(api, txt, tid, mid, sid, null);
    }
  }

  // Hi·ªÉn th·ªã menu nh√≥m ƒë·∫πp
  const data = commandsGroup(isAdmin);
  const totalCmds = data.reduce((acc, cur) => acc + cur.commandsName.length, 0);
  const emojis = ["üå∏", "üî•", "‚ö°", "üçÄ", "üåô", "‚≠ê", "üé∂", "üåÄ", "üíé", "üêâ"];
  const pick = () => emojis[Math.floor(Math.random() * emojis.length)];
  const vnTime = new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });

  let txt = `‚ïî‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ïó
   üå∏  MENU BOT üå∏
   ‚è∞ ${vnTime}
‚ïö‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ïù\n\n`;

  data.forEach((grp, i) => txt += `${pick()} ${i + 1}. ${grp.commandCategory} ‚Äî ${grp.commandsName.length} l·ªánh\n`);

  txt += `\n‚ï†‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ï£
üìå T·ªïng: ${totalCmds} l·ªánh
üëâ Reply t·ª´ 1 ‚Üí ${data.length} ƒë·ªÉ ch·ªçn nh√≥m
„Äé ü§ñ Bot by Ki√™n ‚ú® „Äè
‚ûú Th·∫£ icon üòæ ƒë·ªÉ bot g·ª° menu ngay!
‚ïö‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ïù`;

  return sendMenuMessage(api, txt, tid, mid, sid, data);
};

module.exports.handleReply = async function ({ handleReply: $, api, event }) {
  const { sendMessage: send, unsendMessage: un } = api;
  const { threadID: tid, messageID: mid, senderID: sid, args } = event;
  if (sid != $.author) return send("ƒêi ra ch·ªó kh√°c ch∆°i ü•π", tid, mid);

  switch ($.case) {
    case 'infoGr': {
      const data = $.data[(+args[0]) - 1];
      if (!data) return send(`"${args[0]}" kh√¥ng n·∫±m trong menu`, tid, mid);
      try { un($.messageID); } catch { }

      const emojis = ["üå∏", "üî•", "‚ö°", "üçÄ", "üåô", "‚≠ê", "üé∂", "üåÄ", "üíé", "üêâ"];
      const pick = () => emojis[Math.floor(Math.random() * emojis.length)];
      const vnTime = new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });

      let txt = `‚ïî‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ïó
   üå∏  ${data.commandCategory}  üå∏
   ‚è∞ ${vnTime}
‚ïö‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ïù\n\n`;

      data.commandsName.forEach((name, i) => txt += `${pick()} ${i + 1}. ${name}\n`);

      txt += `\n‚ï†‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ï£
üëâ Reply t·ª´ 1 ƒë·∫øn ${data.commandsName.length}
‚ïö‚ú¶‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ú¶‚ïù`;

      let payload = { body: txt };
      const attach = await getAttachment();
      if (attach) payload.attachment = attach;

      send(payload, tid, (a, b) => {
        global.client.handleReply.push({
          name: module.exports.config.name,
          messageID: b.messageID,
          author: sid,
          case: 'infoCmds',
          data: data.commandsName
        });
        if (autoUnsend?.status) setTimeout(v1 => un(v1), 1000 * autoUnsend.timeOut, b.messageID);
      }, mid);
    }; break;

    case 'infoCmds': {
      const cmd = global.client.commands.get($.data[(+args[0]) - 1]);
      if (!cmd) return send(`"${args[0]}" kh√¥ng n·∫±m trong menu`, tid, mid);
      try { un($.messageID); } catch { }

      let payload = { body: infoCmds(cmd.config, tid) };
      const attach = await getAttachment();
      if (attach) payload.attachment = attach;

      send(payload, tid, mid);
    }; break;
  }
};
